<!-- phongo -->
<!ENTITY phongo.parameter.namespace '
   <varlistentry xmlns="http://docbook.org/ns/docbook">
    <term><parameter>namespace</parameter></term>
    <listitem>
     <para>
      A fully qualified namespace (databaseName.collectionName)
     </para>
    </listitem>
   </varlistentry>
'>
<!ENTITY phongo.parameter.readPreference '
   <varlistentry xmlns="http://docbook.org/ns/docbook">
    <term><parameter>readPreference</parameter></term>
    <listitem>
     <para>
      Optionally, a <classname>MongoDB\Driver\ReadPreference</classname> to route the command to. If none given, defaults to the Read Preferences set by the <link linkend="mongodb-driver-manager.construct-uri">MongoDB Connection URI</link>.
     </para>
    </listitem>
   </varlistentry>
'>
<!ENTITY phongo.parameter.writeConcern '
   <varlistentry xmlns="http://docbook.org/ns/docbook">
    <term><parameter>writeConcern</parameter></term>
    <listitem>
     <para>
Optionally, a <classname>MongoDB\Driver\WriteConcern</classname>. If none given, default to the Write Concern set by the <link linkend="mongodb-driver-manager.construct-uri">MongoDB Connection URI</link>.
     </para>
    </listitem>
   </varlistentry>
'>
<!ENTITY phongo.parameter.filter '
   <varlistentry xmlns="http://docbook.org/ns/docbook">
    <term><parameter>filter</parameter></term>
    <listitem>
     <para>
      The search filter.
     </para>
    </listitem>
   </varlistentry>
'>
<!ENTITY phongo.parameter.newObj '
   <varlistentry xmlns="http://docbook.org/ns/docbook">
    <term><parameter>newObj</parameter></term>
    <listitem>
     <para>
      Either an array of update operators, or the full object to be replaced with
     </para>
    </listitem>
   </varlistentry>
'>
<!ENTITY phongo.parameter.deleteOptions '
   <varlistentry xmlns="http://docbook.org/ns/docbook">
    <term><parameter>deleteOptions</parameter></term>
    <listitem>
     <para>
      <table>
       <title>deleteOptions</title>
       <tgroup cols="4">
        <thead>
         <row>
          <entry>Option</entry>
          <entry>Type</entry>
          <entry>Description</entry>
          <entry>Default</entry>
         </row>
        </thead>
        <tbody>
         <row>
          <entry>limit</entry>
          <entry>boolean</entry>
          <entry>Delete all matching documents (limit=0), or only the first matching document (limit=1)</entry>
          <entry>0</entry>
         </row>
        </tbody>
       </tgroup>
      </table>
     </para>
    </listitem>
   </varlistentry>
'>
<!ENTITY phongo.parameter.updateOptions '
   <varlistentry xmlns="http://docbook.org/ns/docbook">
    <term><parameter>updateOptions</parameter></term>
    <listitem>
     <para>
      <table>
       <title>updateOptions</title>
       <tgroup cols="4">
        <thead>
         <row>
          <entry>Option</entry>
          <entry>Type</entry>
          <entry>Description</entry>
          <entry>Default</entry>
         </row>
        </thead>
        <tbody>
         <row>
          <entry>limit</entry>
          <entry>boolean</entry>
          <entry>Update only the first matching document (limit=1), or all matching documents (limit=0)</entry>
          <entry>1</entry>
         </row>
         <row>
          <entry>upsert</entry>
          <entry>boolean</entry>
          <entry>If <parameter>filter</parameter> does not match an existing document, insert the <parameter>newObj</parameter> as a new object, applying any atomic modifiers to the <parameter>filter</parameter> if applicable.</entry>
          <entry>0</entry>
         </row>
        </tbody>
       </tgroup>
      </table>
     </para>
    </listitem>
   </varlistentry>
'>
<!ENTITY phongo.returns.WriteResult '
  <para xmlns="http://docbook.org/ns/docbook">
   Returns <classname>MongoDB\Driver\WriteResult</classname> on success, &phongo.throws.onfailure;.
  </para>
'>
<!ENTITY phongo.throws.onfailure 'throws exception (instanceof <classname xmlns="http://docbook.org/ns/docbook" >MongoDB\Driver\Exception</classname>) on failure'>
<!ENTITY phongo.throws.std '&phongo.throws.argumentparsing;&phongo.throws.duplicatekey;&phongo.throws.authentication;&phongo.throws.connection;'>
<!ENTITY phongo.throws.argumentparsing '<member xmlns="http://docbook.org/ns/docbook">Throws <classname>MongoDB\Driver\InvalidArgumentException</classname> on argument parsing errors.</member>'>
<!ENTITY phongo.throws.duplicatekey '<member xmlns="http://docbook.org/ns/docbook">Throws <classname>MongoDB\Driver\DuplicateKeyException</classname> if a write causes Duplicate Key error</member>'>
<!ENTITY phongo.throws.authentication '<member xmlns="http://docbook.org/ns/docbook">Throws <classname>MongoDB\Driver\AuthenticationException</classname> if authentication is needed and fails</member>'>
<!ENTITY phongo.throws.connection '<member xmlns="http://docbook.org/ns/docbook">Throws <classname>MongoDB\Driver\ConnectionException</classname> if connection to the server fails for other then authentication reasons</member>'>
<!ENTITY phongo.warning.noexception '   
  <warning xmlns="http://docbook.org/ns/docbook">
   <para>
    No exception is thrown on write error.
   </para>
  </warning>
'> 
<!ENTITY phongo.note.getwriteerrors '   
  <note xmlns="http://docbook.org/ns/docbook">
   <para>
    On write failure,
    <methodname>MongoDB\Driver\WriteResult::getWriteErrors</methodname> will
    only ever have one <classname>MongoDB\Driver\WriteError</classname> in the
    array, and <methodname>MongoDB\Driver\WriteError::getIndex</methodname>
    will always be 0 (the index of this operation in the batch).
   </para>
  </note>
'> 
<!ENTITY phongo.note.getupsertedids '   
  <note xmlns="http://docbook.org/ns/docbook">
   <para>
    <methodname>MongoDB\Driver\WriteResult::getUpsertedIds</methodname> will
    only ever have one <classname>BSON\ObjectID</classname> in the 
    array, and the index always be 0 (the index of this operation in the batch).
   </para>
  </note>
'> 
   

